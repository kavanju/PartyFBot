import os
import time
import json
import logging
import random
import requests
from io import BytesIO
from datetime import datetime, timedelta
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, CallbackQueryHandler
)
from g4f.client import Client  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ò–ò

# ----------------- –õ–û–ì–ò -----------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ----------------- –ù–ê–°–¢–†–û–ô–ö–ò -----------------
TOKEN = os.getenv("TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
OWNER_ID = os.getenv("OWNER_ID", "1282820065")  # –¢–≤–æ–π Telegram ID
KASPI_LINK = "https://pay.kaspi.kz/pay/sav8emzy"
PAYPAL_LINK = "https://www.paypal.com/paypalme/yourpaypal/1usd"

client = Client()
user_free_queries = {}
user_paid_until = {}
cached_results = {}

# ----------------- –í–´–ë–û–† –Ø–ó–´–ö–ê -----------------
LANGS = {
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "kk": "üá∞üáø “ö–∞–∑–∞“õ—à–∞",
    "en": "üá¨üáß English"
}
user_lang = {}

MESSAGES = {
    "start": {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "kk": "–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        "en": "Choose a language:"
    },
    "ask_query": {
        "ru": "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –º–µ—Å—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ (–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, —Ü–µ–Ω—ã, –º—É–∑—ã–∫–∞):",
        "kk": "“ö–∞–Ω–¥–∞–π –æ—Ä—ã–Ω–¥—ã —ñ–∑–¥–µ–≥—ñ“£—ñ–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑:",
        "en": "Describe the place you want to find:"
    },
    "free_used": {
        "ru": f"–í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –û–ø–ª–∞—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:\nüá∞üáø Kaspi: {KASPI_LINK} (300‚Ç∏)\nüåç PayPal: {PAYPAL_LINK} ($1)",
        "kk": f"–¢–µ–≥—ñ–Ω —Å“±—Ä–∞–Ω—ã—Å—ã“£—ã–∑ –ø–∞–π–¥–∞–ª–∞–Ω—ã–ª–¥—ã. –ñ–∞–ª“ì–∞—Å—Ç—ã—Ä—É “Ø—à—ñ–Ω —Ç”©–ª–µ“£—ñ–∑:\nüá∞üáø Kaspi: {KASPI_LINK} (300‚Ç∏)\nüåç PayPal: {PAYPAL_LINK} ($1)",
        "en": f"Your free request is used. Please pay to continue:\nüá∞üáø Kaspi: {KASPI_LINK} (300‚Ç∏)\nüåç PayPal: {PAYPAL_LINK} ($1)"
    },
    "paid_success": {
        "ru": "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 48 —á–∞—Å–æ–≤.",
        "kk": "‚úÖ –¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª–¥—ã! 48 —Å–∞“ì–∞—Ç“õ–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É –±–µ—Ä—ñ–ª–¥—ñ.",
        "en": "‚úÖ Payment confirmed! Access granted for 48 hours."
    }
}

# ----------------- –°–¢–ê–†–¢ -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton(name, callback_data=f"lang_{code}")]
        for code, name in LANGS.items()
    ]
    await update.message.reply_text(
        MESSAGES["start"]["ru"],
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# ----------------- –í–´–ë–û–† –Ø–ó–´–ö–ê -----------------
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data.split("_")[1]
    user_lang[query.from_user.id] = lang_code
    await query.message.reply_text(MESSAGES["ask_query"][lang_code])

# ----------------- –ü–û–ò–°–ö –ó–ê–í–ï–î–ï–ù–ò–ô -----------------
async def search_places(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    lang = user_lang.get(user_id, "ru")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
    if user_id not in user_paid_until or user_paid_until[user_id] < datetime.now():
        if user_free_queries.get(user_id, 0) >= 1:
            await update.message.reply_text(MESSAGES["free_used"][lang])
            return
        else:
            user_free_queries[user_id] = user_free_queries.get(user_id, 0) + 1

    query_text = update.message.text

    # –ö–µ—à
    if query_text in cached_results:
        await update.message.reply_media_group(cached_results[query_text])
        return

    await update.message.reply_text("üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞...")

    # –ò–ò-–ø–æ–¥–±–æ—Ä
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": f"–ü–æ–¥–±–µ—Ä–∏ 3 –∑–∞–≤–µ–¥–µ–Ω–∏—è: {query_text}, —Å –∞–¥—Ä–µ—Å–æ–º, –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π, —Å—Ä–µ–¥–Ω–∏–º –≤–æ–∑—Ä–∞—Å—Ç–æ–º, –æ—Ç–∑—ã–≤–∞–º–∏ –∏ —Ü–µ–Ω–æ–π"}]
    )
    ai_text = response.choices[0].message.content

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–µ–π–∫–æ–≤—ã—Ö —Ñ–æ—Ç–æ –∏ –∫–∞—Ä—Ç—ã (–ø—Ä–∏–º–µ—Ä)
    photos = [
        InputMediaPhoto(media="https://source.unsplash.com/600x400/?bar"),
        InputMediaPhoto(media="https://source.unsplash.com/600x400/?restaurant")
    ]

    cached_results[query_text] = photos
    await update.message.reply_media_group(photos)
    await update.message.reply_text(ai_text)

# ----------------- –§–ï–ô–ö–û–í–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï -----------------
async def fake_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    lang = user_lang.get(user_id, "ru")
    await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –æ–ø–ª–∞—Ç—É...")
    time.sleep(30)
    user_paid_until[user_id] = datetime.now() + timedelta(hours=48)
    await update.message.reply_text(MESSAGES["paid_success"][lang])

# ----------------- MAIN -----------------
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(set_language, pattern="^lang_"))
    app.add_handler(CommandHandler("pay", fake_payment))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_places))

    app.run_polling()
